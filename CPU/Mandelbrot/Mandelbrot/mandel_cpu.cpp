#include "mandel_cpu.h"
#include "pfc_types.h"
#include "pfc_bitmap_3.h"
#include "pfc_threading.h"
#include <vector>
#include "shared_bitmap.h"

auto constexpr WIDTH{ 8192 };
auto constexpr HEIGHT{ 4608 };

auto constexpr ITERATIONS{ 128 };

int constexpr PIXEL_PER_IMAGE{ WIDTH * HEIGHT }; // 37.748.736
float constexpr CX_MIN[] = { -2.64529, -2.55029, -2.46004, -2.3743, -2.29285, -2.21547, -2.14196, -2.07213, -2.00579, -1.94276, -1.88289, -1.82601, -1.77197, -1.72064, -1.67187, -1.62554, -1.58153, -1.53972, -1.5, -1.46226, -1.42641, -1.39236, -1.36, -1.32927, -1.30007, -1.27233, -1.24598, -1.22094, -1.19716, -1.17457, -1.1531, -1.13271, -1.11334, -1.09494, -1.07746, -1.06085, -1.04507, -1.03008, -1.01584, -1.00231, -0.989462, -0.977254, -0.965656, -0.954638, -0.94417, -0.934226, -0.92478, -0.915805, -0.907279, -0.89918, -0.891485, -0.884176, -0.877231, -0.870634, -0.864367, -0.858413, -0.852757, -0.847384, -0.842279, -0.83743, -0.832823, -0.828446, -0.824288, -0.820338, -0.816586, -0.813021, -0.809634, -0.806417, -0.803361, -0.800457, -0.797699, -0.795079, -0.792589, -0.790224, -0.787977, -0.785843, -0.783815, -0.781889, -0.780059, -0.778321, -0.776669, -0.7751, -0.77361, -0.772194, -0.770849, -0.769571, -0.768357, -0.767203, -0.766108, -0.765067, -0.764078, -0.763138, -0.762246, -0.761398, -0.760593, -0.759828, -0.759101, -0.75841, -0.757754, -0.757131, -0.756539, -0.755976, -0.755442, -0.754935, -0.754452, -0.753994, -0.753559, -0.753146, -0.752753, -0.75238, -0.752025, -0.751688, -0.751368, -0.751065, -0.750776, -0.750502, -0.750241, -0.749993, -0.749758, -0.749535, -0.749323, -0.749121, -0.748929, -0.748747, -0.748575, -0.74841, -0.748254, -0.748106, -0.747965, -0.747832, -0.747704, -0.747584, -0.747469, -0.74736, -0.747257, -0.747158, -0.747065, -0.746976, -0.746892, -0.746812, -0.746736, -0.746663, -0.746595, -0.746529, -0.746467, -0.746409, -0.746353, -0.7463, -0.746249, -0.746201, -0.746156, -0.746112, -0.746071, -0.746032, -0.745995, -0.74596, -0.745926, -0.745894, -0.745864, -0.745835, -0.745808, -0.745782, -0.745758, -0.745734, -0.745712, -0.745691, -0.745671, -0.745652, -0.745634, -0.745617, -0.7456, -0.745585, -0.74557, -0.745556, -0.745543, -0.74553, -0.745518, -0.745507, -0.745496, -0.745486, -0.745476, -0.745466, -0.745458, -0.745449, -0.745441, -0.745434, -0.745427, -0.74542, -0.745413, -0.745407, -0.745401, -0.745396, -0.74539, -0.745385, -0.745381, -0.745376, -0.745372, -0.745368, -0.745364, -0.74536 };
float constexpr CY_MIN[] = { -0.955675, -0.902237, -0.851472, -0.803244, -0.757429, -0.713903, -0.672554, -0.633273, -0.595955, -0.560504, -0.526825, -0.49483, -0.464435, -0.435559, -0.408127, -0.382068, -0.35731, -0.333791, -0.311447, -0.290222, -0.270057, -0.2509, -0.232702, -0.215413, -0.198988, -0.183385, -0.168562, -0.15448, -0.141102, -0.128394, -0.11632, -0.10485, -0.0939543, -0.0836031, -0.0737684, -0.0644264, -0.0555512, -0.0471205, -0.0391105, -0.031501, -0.0242718, -0.0174047, -0.0108809, -0.00468324, 0.00120477, 0.00679828, 0.0121121, 0.0171603, 0.021956, 0.026512, 0.0308401, 0.0349519, 0.038858, 0.0425689, 0.0460942, 0.0494432, 0.0526248, 0.0556474, 0.0585187, 0.0612465, 0.0638379, 0.0662998, 0.0686385, 0.0708604, 0.0729711, 0.0749763, 0.0768813, 0.078691, 0.0804102, 0.0820433, 0.0835949, 0.0850689, 0.0864693, 0.0877995, 0.0890633, 0.0902639, 0.0914045, 0.092488, 0.0935173, 0.0944952, 0.0954242, 0.0963068, 0.0971451, 0.0979416, 0.0986983, 0.0994172, 0.1001, 0.100749, 0.101365, 0.101951, 0.102507, 0.103035, 0.103537, 0.104014, 0.104467, 0.104898, 0.105306, 0.105695, 0.106064, 0.106414, 0.106747, 0.107064, 0.107364, 0.10765, 0.107921, 0.108179, 0.108424, 0.108656, 0.108877, 0.109087, 0.109286, 0.109476, 0.109656, 0.109827, 0.109989, 0.110143, 0.11029, 0.110429, 0.110562, 0.110687, 0.110807, 0.11092, 0.111028, 0.11113, 0.111227, 0.11132, 0.111408, 0.111491, 0.11157, 0.111645, 0.111717, 0.111785, 0.111849, 0.111911, 0.111969, 0.112024, 0.112077, 0.112127, 0.112174, 0.112219, 0.112262, 0.112302, 0.112341, 0.112378, 0.112413, 0.112446, 0.112477, 0.112507, 0.112536, 0.112563, 0.112588, 0.112612, 0.112636, 0.112658, 0.112678, 0.112698, 0.112717, 0.112735, 0.112752, 0.112768, 0.112783, 0.112798, 0.112812, 0.112825, 0.112838, 0.112849, 0.112861, 0.112871, 0.112882, 0.112891, 0.1129, 0.112909, 0.112917, 0.112925, 0.112933, 0.11294, 0.112947, 0.112953, 0.112959, 0.112965, 0.112971, 0.112976, 0.112981, 0.112985, 0.11299, 0.112994, 0.112998, 0.113002, 0.113006, 0.113009, 0.113012, 0.113016, 0.113019, 0.113021, 0.113024, 0.113027, 0.113029, 0.113031, 0.113033, 0.113036 };

pfc::byte_t constexpr COLORS[] = { 0 ,5 ,10 ,15 ,20 ,25 ,30 ,35 ,40 ,45 ,51 ,56 ,61 ,66 ,71 ,76 ,81 ,86 ,91 ,96 ,102 ,107 ,112 ,117 ,122 ,127 ,132 ,137 ,142 ,147 ,153 ,158 ,163 ,168 ,173 ,178 ,183 ,188 ,193 ,198 ,204 ,209 ,214 ,219 ,224 ,229 ,234 ,239 ,244 ,249 };
float constexpr X_FACTORS[] = { 0.000463924, 0.000440728, 0.000418691, 0.000397756, 0.000377869, 0.000358975, 0.000341026, 0.000323975, 0.000307777, 0.000292387, 0.000277768, 0.00026388, 0.000250685, 0.000238152, 0.000226244, 0.000214932, 0.000204185, 0.000193976, 0.000184277, 0.000175063, 0.00016631, 0.000157995, 0.000150094, 0.00014259, 0.000135461, 0.000128688, 0.000122253, 0.00011614, 0.000110333, 0.000104817, 9.95756e-05, 9.45968e-05, 8.98672e-05, 8.53742e-05, 8.11056e-05, 7.70502e-05, 7.31974e-05, 6.95375e-05, 6.60606e-05, 6.27572e-05, 5.96196e-05, 5.66387e-05, 5.38069e-05, 5.11166e-05, 4.85606e-05, 4.61326e-05, 4.38262e-05, 4.16347e-05, 3.95529e-05, 3.75754e-05, 3.56965e-05, 3.39119e-05, 3.22161e-05, 3.06053e-05, 2.90751e-05, 2.76213e-05, 2.62403e-05, 2.49283e-05, 2.36818e-05, 2.24979e-05, 2.1373e-05, 2.03042e-05, 1.9289e-05, 1.83245e-05, 1.74084e-05, 1.65379e-05, 1.57109e-05, 1.49254e-05, 1.41792e-05, 1.34701e-05, 1.27967e-05, 1.2157e-05, 1.1549e-05, 1.09716e-05, 1.04229e-05, 9.90184e-06, 9.40667e-06, 8.9364e-06, 8.48956e-06, 8.0652e-06, 7.66183e-06, 7.27872e-06, 6.9149e-06, 6.56917e-06, 6.24075e-06, 5.9287e-06, 5.63228e-06, 5.3505e-06, 5.08314e-06, 4.82896e-06, 4.58748e-06, 4.35807e-06, 4.14015e-06, 3.9331e-06, 3.73654e-06, 3.54975e-06, 3.37224e-06, 3.20352e-06, 3.04334e-06, 2.89122e-06, 2.74667e-06, 2.60933e-06, 2.47882e-06, 2.35503e-06, 2.23709e-06, 2.12526e-06, 2.01904e-06, 1.9182e-06, 1.82225e-06, 1.73117e-06, 1.64449e-06, 1.5622e-06, 1.48419e-06, 1.41009e-06, 1.33951e-06, 1.27262e-06, 1.20889e-06, 1.14834e-06, 1.09095e-06, 1.03651e-06, 9.84739e-07, 9.35417e-07, 8.88539e-07, 8.44216e-07, 8.02098e-07, 7.61813e-07, 7.23719e-07, 6.87582e-07, 6.53155e-07, 6.20679e-07, 5.89432e-07, 5.60128e-07, 5.32047e-07, 5.05435e-07, 4.80279e-07, 4.56113e-07, 4.33402e-07, 4.11673e-07, 3.9116e-07, 3.71629e-07, 3.53073e-07, 3.35244e-07, 3.18646e-07, 3.02528e-07, 2.87508e-07, 2.73224e-07, 2.59551e-07, 2.46612e-07, 2.34162e-07, 2.22439e-07, 2.11451e-07, 2.0071e-07, 1.90697e-07, 1.81172e-07, 1.72141e-07, 1.63591e-07, 1.55295e-07, 1.4748e-07, 1.40152e-07, 1.33195e-07, 1.26479e-07, 1.20133e-07, 1.14268e-07, 1.0841e-07, 1.0304e-07, 9.791e-08, 9.30272e-08, 8.83919e-08, 8.39966e-08, 7.98416e-08, 7.56937e-08, 7.20335e-08, 6.8366e-08, 6.49459e-08, 6.17731e-08, 5.86004e-08, 5.56751e-08, 5.29827e-08, 5.02976e-08, 4.78598e-08, 4.54148e-08, 4.30935e-08, 4.10196e-08, 3.8822e-08, 3.68718e-08, 3.51617e-08, 3.34517e-08, 3.17416e-08, 3.00315e-08, 2.85689e-08, 2.71063e-08, 2.58837e-08, 2.44138e-08, 2.31986e-08, 2.22162e-08, 2.1001e-08, 2.00186e-08, 1.90435e-08, 1.80684e-08, 1.70933e-08 };
float constexpr Y_FACTORS[] = { 0.000463969, 0.00044077, 0.000418731, 0.000397793, 0.000377905, 0.00035901, 0.000341059, 0.000324006, 0.000307806, 0.000292415, 0.000277795, 0.000263905, 0.00025071, 0.000238174, 0.000226265, 0.000214952, 0.000204204, 0.000193994, 0.000184294, 0.00017508, 0.000166326, 0.00015801, 0.000150109, 0.000142604, 0.000135473, 0.0001287, 0.000122265, 0.000116152, 0.000110344, 0.000104827, 9.95854e-05, 9.4606e-05, 8.98759e-05, 8.53823e-05, 8.11127e-05, 7.70572e-05, 7.32043e-05, 6.95443e-05, 6.60672e-05, 6.27636e-05, 5.96253e-05, 5.66442e-05, 5.3812e-05, 5.11214e-05, 4.85653e-05, 4.61371e-05, 4.38302e-05, 4.16387e-05, 3.95568e-05, 3.75789e-05, 3.57e-05, 3.39149e-05, 3.22192e-05, 3.06082e-05, 2.90779e-05, 2.7624e-05, 2.62427e-05, 2.49307e-05, 2.3684e-05, 2.25e-05, 2.13749e-05, 2.03061e-05, 1.92908e-05, 1.83264e-05, 1.741e-05, 1.65395e-05, 1.57125e-05, 1.49269e-05, 1.41806e-05, 1.34716e-05, 1.27979e-05, 1.2158e-05, 1.15502e-05, 1.09725e-05, 1.04241e-05, 9.90278e-06, 9.40775e-06, 8.93727e-06, 8.49049e-06, 8.06594e-06, 7.66264e-06, 7.2794e-06, 6.91554e-06, 6.56965e-06, 6.24131e-06, 5.9292e-06, 5.63273e-06, 5.35099e-06, 5.08357e-06, 4.82917e-06, 4.5878e-06, 4.35858e-06, 4.14065e-06, 3.93358e-06, 3.73692e-06, 3.54982e-06, 3.37269e-06, 3.20382e-06, 3.04363e-06, 2.89169e-06, 2.74712e-06, 2.60951e-06, 2.47927e-06, 2.35511e-06, 2.23747e-06, 2.12546e-06, 2.0191e-06, 1.91839e-06, 1.82244e-06, 1.73128e-06, 1.64489e-06, 1.5624e-06, 1.48426e-06, 1.41003e-06, 1.3397e-06, 1.27285e-06, 1.20903e-06, 1.14869e-06, 1.09095e-06, 1.03668e-06, 9.84588e-07, 9.35534e-07, 8.88647e-07, 8.44367e-07, 8.02258e-07, 7.61885e-07, 7.23682e-07, 6.87648e-07, 6.53353e-07, 6.20795e-07, 5.89537e-07, 5.60016e-07, 5.32234e-07, 5.05318e-07, 4.80138e-07, 4.56261e-07, 4.33254e-07, 4.11548e-07, 3.91145e-07, 3.71609e-07, 3.52941e-07, 3.35577e-07, 3.18645e-07, 3.02582e-07, 2.8739e-07, 2.73063e-07, 2.59606e-07, 2.46581e-07, 2.33992e-07, 2.22271e-07, 2.11417e-07, 2.00997e-07, 1.90579e-07, 1.81028e-07, 1.72347e-07, 1.63664e-07, 1.55416e-07, 1.47601e-07, 1.40222e-07, 1.33274e-07, 1.26763e-07, 1.20252e-07, 1.14175e-07, 1.08531e-07, 1.02887e-07, 9.81125e-08, 9.29018e-08, 8.85612e-08, 8.37855e-08, 7.98782e-08, 7.59726e-08, 7.20654e-08, 6.85916e-08, 6.51178e-08, 6.16456e-08, 5.86068e-08, 5.55664e-08, 5.29627e-08, 5.03589e-08, 4.77536e-08, 4.53649e-08, 4.29779e-08, 4.08076e-08, 3.90707e-08, 3.69003e-08, 3.51634e-08, 3.34265e-08, 3.16896e-08, 2.99543e-08, 2.86525e-08, 2.7349e-08, 2.56121e-08, 2.43118e-08, 2.34418e-08, 2.21415e-08, 2.0838e-08, 1.99696e-08, 1.91011e-08, 1.82343e-08, 1.69308e-08 };

//end

pfc::byte_t valueHost(int const inner_idx, int const outer_index) {
	static auto constexpr BORDER{ 4.0f };

	float cr{ (inner_idx % WIDTH) * X_FACTORS[outer_index] + CX_MIN[outer_index] },
		ci{ (inner_idx / WIDTH) * Y_FACTORS[outer_index] + CY_MIN[outer_index] };

	auto iterations{ ITERATIONS };
	auto zr{ 0.0f },
		zi{ 0.0f },
		z_norm{ 0.0f },
		zr_2{ 0.0f },
		zi_2{ 0.0f },
		tempi{ 0.0f };

	while (--iterations && z_norm < BORDER)
	{
		tempi = zr * zi;
		zi = tempi + tempi + ci;
		zr = zr_2 - zi_2 + cr;

		zr_2 = zr * zr;
		zi_2 = zi * zi;
		z_norm = zr_2 + zi_2;
	}
	iterations = ITERATIONS - iterations;
	
	return iterations < ITERATIONS ? COLORS[iterations] : 0;
}

// CPU functions
void global_sequential_local_sequential(int const images) {
	for (auto o{ 0 }; o < images; ++o)
	{
		auto data{ bitmaps[o].pixel_span().data() };
		// foreach pixel in image
		for (auto i{ 0 }; i < PIXEL_PER_IMAGE; ++i) {
			data[i] = { 0, 0, valueHost(i, o) };
		}
	}
}

void global_parallel_local_sequential_task(int const images) {
	// one thread per image
	pfc::parallel_range(true, images, images, [](int o, int begin, int end) {

		auto data{ bitmaps[o].pixel_span().data() };
		// foreach pixel in image
		for (auto i{ 0 }; i < PIXEL_PER_IMAGE; ++i) {
			data[i] = { 0, 0, valueHost(i, o) };
		}
	});
}

void global_parallel_local_parallel_task(int const images, int const inner_size) {
	// one thread per image
	pfc::parallel_range(true, images, images, [inner_size](int o, int begin, int end) {
		// foreach pixel in image
		pfc::parallel_range(true, inner_size, PIXEL_PER_IMAGE, [data{ bitmaps[o].pixel_span().data() }, o](int innerIdx, int begin, int end) {
			for (auto i{ begin }; i < end; ++i) {
				data[i] = { 0, 0, valueHost(i, o) };
			}
		});
	});
}

void global_parallel_local_parallel_task2(int const images, int const inner_size) {
	int const size{ PIXEL_PER_IMAGE * images };
	pfc::parallel_range(true, inner_size, size, [](int innerIdx, unsigned int begin, unsigned int end) {
		unsigned int const o{ begin / PIXEL_PER_IMAGE };
		begin %= PIXEL_PER_IMAGE;
		end = (end -1) % PIXEL_PER_IMAGE + 1;
		auto const data{ bitmaps[o].pixel_span().data() };

		for (auto i{ begin }; i < end; ++i) {
			data[i] = { 0, 0, valueHost(i, o) };
		}
	});
}

void global_parallel_local_parallel_task3(int const images, int const inner_size) {
	auto const tasks_per_img = inner_size / images;
	auto const one_unit = PIXEL_PER_IMAGE / (inner_size / images);

	pfc::parallel_range_no_size(inner_size, [tasks_per_img, one_unit](int const task_idx, int const b, int const e ) {

		auto const image_no{ task_idx / tasks_per_img };
		auto const begin{ task_idx % tasks_per_img * one_unit };
		auto const end{ begin + one_unit };

		auto const data{ bitmaps[image_no].pixel_span().data() };

		for (auto i{ begin }; i < end; ++i) {
			data[i] = { 0, 0, valueHost(i, image_no) };
		}
	});
}

void global_sequential_local_prallel_task(int const images, int const inner_size) {
	for (auto o{ 0 }; o < images; ++o)
	{
		auto data{ bitmaps[o].pixel_span().data() };
		// foreach pixel in image
		pfc::parallel_range(true, inner_size, PIXEL_PER_IMAGE, [data, o](int innerIdx, int begin, int end) {
			for (auto i{ begin }; i < end; ++i) {
				data[i] = { 0, 0, valueHost(i, o) };
			}
			});
	}
}

void global_parallel_local_sequential_thread(int const images) {
	// one thread per image
	pfc::parallel_range(false, images, images, [](int o, int begin, int end) {

		// foreach pixel in image
		auto data{ bitmaps[o].pixel_span().data() };
		for (auto i{ 0 }; i < PIXEL_PER_IMAGE; ++i) {
			data[i] = { 0, 0, valueHost(i, o) };
		}

		});
}

void global_parallel_local_parallel_thread(int const images, int const inner_size) {
	pfc::parallel_range(false, images, images, [inner_size](int o, int begin, int end) {
		auto data{ bitmaps[o].pixel_span().data() };
		// foreach pixel in image
		pfc::parallel_range(false, inner_size, PIXEL_PER_IMAGE, [data, o](int innerIdx, int begin, int end) {
			for (auto i{ begin }; i < end; ++i) {
				data[i] = { 0, 0, valueHost(i, o) };
			}
			});
		});
}

void global_sequential_local_prallel_thread(int const images, int const inner_size) {
	for (auto o{ 0 }; o < images; ++o)
	{
		auto data{ bitmaps[o].pixel_span().data() };
		// foreach pixel in image
		pfc::parallel_range(false, inner_size, PIXEL_PER_IMAGE, [data, o](int innerIdx, int begin, int end) {
			for (auto i{ begin }; i < end; ++i) {
				data[i] = { 0, 0, valueHost(i, o) };
			}
		});
	}
}

void init_CPU() {
	std::cout << "Allocating Bitmaps" << std::endl;
	static const int max_images{ 200 };

	for (int i = 0; i < max_images; ++i) {
		bitmaps[i] = pfc::bitmap{ WIDTH, HEIGHT };
	}
	std::cout << "Bitmaps Allocated" << std::endl;
}

void storeImages(int const from, int const to, std::string const& prefix) {

	std::cout << "storing images in range (" << from << " - " << to << ") for " << prefix << std::endl;
	auto const images{ to + 1 - from };

	pfc::parallel_range(false, images, images, [prefix, from](int o, int begin, int end) {
		bitmaps[o + from - 1].to_file("../img/" + prefix + "_" + std::to_string(o + from) + ".bmp");
		});
	std::cout << "stored " << images << " images for " << prefix << std::endl;
}